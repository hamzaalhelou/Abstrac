/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package l12.pkgabstract;

/**
 *
 * @author omen
 * 
 * هو اسلوب مستخدم لتعريف  كلاس بالخاصية ابستراكت بحيث يصبح
 * قابلا ان يحتوي على دوال مجردة و هي عبارة عن دوال ليس بداخلها كود برمجي
 * تستخدم من اي كلاس اخر يرث من الكلاس الابستراكت ليقوم بدوره
 * بعمل اوفرايد لكافة الدوال الابستراكت المعرفة بالكلاس الأب و بناءها بالشكل المناسب لكل
 * كلاس على حدى
 * 
 * عندما يرث كلاس غير ابستراكت من اخر ابستراكت ولا يحتوي على اي دالة 
 * ابستراكت لا يكون بهذه الحالة مشكلة 
 * 
 * عنما يرث كلاس غير ابستراكت من اخر ابتسراكت و يحتوي على دالة واحدة او اكثر ابستراكت
 * فيجب في هذه الحالة اما ان يعرف الابن بصفة الابستراكت ليصبح قادرا على استيعاب
 * الدوال الابستراكت التي ورثها عن ابيه او ان يقوم بعمل امبلنت و هي خاصية
 * يتم بها اعادة تعريف الدوال التي كانت ابستراكت في الأب ببنيتها الكاملة في الإبن
 * ليتم تنفيذها فيما بعد داخل الابن حسب الحاجة و يتم اعادة تعريفها 
 * بالكود البرمجي المناسب لكل ابن حسب ما يريد.
 * 
 * لا يشترط ان يحتوي الكلاس الابستراكت على دوال ابستراكت
 * اذ انه على سبيل المثال تم تعريفه ابستراكت بسبب انه ورث من اب ابستراكت
 * و لا يريد ان يقوم بتعريف دواله بداخله
 * 
 *  يمكن ان يحتوي على متغيرات
 * الكلاس ابستراكت لا يمكن انشاء كائنات منه
 * كلاس ابستراكت يمكن ان يحتوى دوال عادية او دوال مجرده
 */
 abstract public class Laptop {
     /*
      لا يمكن تعريف المتغير كابستراكت
      لا يمكن تعريف الدالة البنائية كأبستراكت
      لا يمكن تعريف دالة كستاتيك وابستراكت
      لا يمكن ان يأتي ابستراكت مع معامل وصول برايفت
      ولكن يمكن ان يأتي مع ديفولت كباكج برايفت
      لان الميثود يفترض ان يرثها الابناء
      
      */
      
     
  //String modelNumber = "ff";
    int modelNumber;
    String modelName;
    
    public Laptop(){}
    
    public Laptop(int modelNumber , String modelName){
    this.modelNumber = modelNumber;
    this.modelName = modelName;
    }
    
    abstract public  void powerOn();
    
    public abstract void powerOff();
    
    public abstract void showSpecifications();
    
    
    public abstract int getRamSize();

    public String getModelName() {
        return modelName;
    }
    
    
}

   //static      يستخدم لتعريف كلاس أو متغير أو دالة مشتركة بين جميع الكائنات من كلاس معين
      //NESTED CLASS -> The only way to define a static class
      //    static class Car2{
      //        
      //    }
    
    //>> final      يستخدم لمنع الوراثة من الكلاس أو لمنع كتابة محتوى الدالة 
    //( أو تعديلها ) في الكلاس الذي يرثها أو لجعل قيمة المتغير غير قابلة للتغير بعد تحديدها
    
    //>> Default      لا يمكن الوصول للداتا او الدوال عن طريقه الا بنفس الباكج
    
    //>> Protected    لا يمكن الوصول للداتا او الدوال عن طريقه الا من خلال نفس الباكج او الكلاسات التي ترث منه
    //>> protected ملا حظة لا يمكن تعريف الكلاس    
    
   //>>  private   هو أعلى مستوى من الحمايه حيث ان المتغيرات والدوال التي عرفت من خلاله لا يمكن الوصول لها 
   //                              الا من داخل الكلاس الذي عرفت فيه
